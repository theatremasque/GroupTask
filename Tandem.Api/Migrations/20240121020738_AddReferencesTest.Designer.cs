// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tandem.Api.Infrastructure;

#nullable disable

namespace Tandem.Api.Migrations
{
    [DbContext(typeof(GroupDbContext))]
    [Migration("20240121020738_AddReferencesTest")]
    partial class AddReferencesTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tandem.Api.Cores.AcademicGroupStudent", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("AcademicGroupStudents");
                });

            modelBuilder.Entity("Tandem.Api.Cores.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Tandem.Api.Cores.LearnGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("LearnGroups");
                });

            modelBuilder.Entity("Tandem.Api.Cores.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Tandem.Api.Cores.SubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("Tandem.Api.Cores.AcademicGroupStudent", b =>
                {
                    b.HasOne("Tandem.Api.Cores.Group", "Group")
                        .WithOne("AcademicGroupStudent")
                        .HasForeignKey("Tandem.Api.Cores.AcademicGroupStudent", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tandem.Api.Cores.Student", "Student")
                        .WithOne("AcademicGroupStudent")
                        .HasForeignKey("Tandem.Api.Cores.AcademicGroupStudent", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Tandem.Api.Cores.Group", b =>
                {
                    b.HasOne("Tandem.Api.Cores.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Tandem.Api.Cores.LearnGroup", b =>
                {
                    b.HasOne("Tandem.Api.Cores.Group", "Group")
                        .WithMany("LearnGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tandem.Api.Cores.Student", "Student")
                        .WithMany("LearnGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Tandem.Api.Cores.SubGroup", b =>
                {
                    b.HasOne("Tandem.Api.Cores.Group", "Group")
                        .WithMany("SubGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tandem.Api.Cores.Student", "Student")
                        .WithMany("SubGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Tandem.Api.Cores.Group", b =>
                {
                    b.Navigation("AcademicGroupStudent")
                        .IsRequired();

                    b.Navigation("LearnGroups");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("Tandem.Api.Cores.Student", b =>
                {
                    b.Navigation("AcademicGroupStudent")
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("LearnGroups");

                    b.Navigation("SubGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
